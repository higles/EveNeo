@model IEnumerable<SchematicVM>
@using EveNeo.ViewModels
@using EveNeo.Classes
@{ 
    //Layout = "";
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
<link rel="stylesheet" href="~/css/pi-tool.css" />

<h2>Index</h2>

<button class="btn btn-dark view-toggle" data-view="build-cost">View Profit</button>

<table class="table table-striped table-bordered table-dark" id="pi-overview-table" style="margin-top: 100px;">
    <thead>
        <tr>
            <th colspan="9">Planet Type</th>
            @foreach (ItemVM mat in ViewBag.RawMats)
            {
                <th class="raw-mat-header" data-column="@mat.ID"><div>@mat.Name</div></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (PlanetType planet in ViewBag.PlanetTypes)
        {
            <tr class="planet-row">
                <th role="row" colspan="9" class="planet-header">@planet.Name</th>
                @foreach (ItemVM mat in ViewBag.RawMats)
                {
                    <td class="mat-box" data-column="@mat.ID">
                        @if (planet.Resources.FirstOrDefault(r => r.ID == mat.ID) != null)
                        {
                            <span><img src="~/images/pi_tool/check.svg" /></span>
                        }
                    </td>
                }
            </tr>
        }

        <tr style="background: transparent"><td colspan="@(ViewBag.RawMats.Count + 5)" style="border-left-color: transparent; border-right-color: transparent;"></td></tr>

        <tr>
            <th colspan="9">ISK / Unit</th>
            @foreach (ItemVM mat in ViewBag.RawMats)
            {
                <td style="text-align: right">@(mat.Price.ToString("n2"))</td>
            }
        </tr>

        <tr style="background: transparent"><td colspan="@(ViewBag.RawMats.Count + 5)" style="border-left-color: transparent; border-right-color: transparent;"></td></tr>

        <tr class="schematic-header-row">
            <th rowspan="2" class="sortable" data-column="Material" data-sort="no-order">Processed Mat<span></span></th>
            <th rowspan="2" class="sortable" data-column="Tier" data-sort="no-order">Tier<span></span></th>
            <th rowspan="2" class="sortable" data-column="M3" data-sort="no-order">m3<span></span></th>
            <th rowspan="2" colspan="2" class="sortable hidden profit" data-column="PerUnitProfit" data-sort="no-order">Profit / Unit<span></span></th>
            <th rowspan="2" colspan="2" class="sortable hidden profit" data-column="PerM3Profit" data-sort="no-order">Profit / m3<span></span></th>
            <th rowspan="2" colspan="2" class="sortable hidden profit" data-column="PerHrProfit" data-sort="no-order">Profit / Hr<span></span></th>
            <th colspan="2" class="build-cost" style="text-align: center">ISK / Unit</th>
            <th colspan="2" class="build-cost" style="text-align: center">ISK / M3</th>
            <th colspan="2" class="build-cost" style="text-align: center">ISK / Hr</th>
            <th rowspan="2" colspan="@(ViewBag.RawMats.Count)"></th>
        </tr>
        <tr class="schematic-header-row">
            <th class="sortable build-cost" data-column="PerUnitValue" data-sort="no-order">Out<span></span></th>
            <th class="sortable build-cost" data-column="PerUnitCost" data-sort="no-order">In<span></span></th>
            <th class="sortable build-cost" data-column="PerM3Value" data-sort="no-order">Out<span></span></th>
            <th class="sortable build-cost" data-column="PerM3Cost" data-sort="no-order">In<span></span></th>
            <th class="sortable build-cost" data-column="PerHrValue" data-sort="no-order">Out<span></span></th>
            <th class="sortable build-cost" data-column="PerHrCost" data-sort="no-order">In<span></span></th>
        </tr>

        @foreach (SchematicVM schematic in Model)
        {
            // Get schematic hierarchy
            List<SchematicVM> hierarchy = new List<SchematicVM>();
            List<SchematicVM> teir = new List<SchematicVM>();
            hierarchy.Add(schematic);
            do
            {
                var schemsNotInHierarchy = Model.Where(m => !hierarchy.Any(h => h.ID == m.ID));
                teir = schemsNotInHierarchy.Where(m => hierarchy.Any(h => h.Inputs.Any(i => i.ID == m.Output.ID))).ToList();
                hierarchy.AddRange(teir);
            } while (teir.Count != 0);

            // Get raw materials from hierarchy
            List<Material> rawMats = new List<Material>();
            foreach (var schem in hierarchy)
            {
                rawMats.AddRange(schem.Inputs.Where(i => i.CategoryID == (int)Constants.Categories.PlanetaryResources && !rawMats.Any(m => m.ID == i.ID)));
            }

            decimal inputCost = 0;
            double inputVolume = 0;
            foreach (var input in schematic.Inputs)
            {
                inputCost += (input.Price * input.Quantity);
                inputVolume += (input.Volume * input.Quantity);
            }

            var cycleTime = ((decimal)schematic.CycleTime / 60) / 60;
            var perUnitValue = schematic.Output.Price / schematic.Output.Quantity;
            var perUnitCost = inputCost / schematic.Output.Quantity;
            var perM3Value = schematic.Output.Price / Convert.ToDecimal(schematic.Output.Volume);
            var perM3Cost = inputCost / Convert.ToDecimal(schematic.Output.Volume);
            var perHrValue = (schematic.Output.Price * (decimal)schematic.Output.Quantity) / cycleTime;
            var perHrCost = inputCost / cycleTime;
            var perUnitProfit = perUnitValue - perUnitCost;
            var perM3Profit = perM3Value - perM3Cost;
            var perHrProfit = perHrValue - perHrCost;
            var perUnitColor = perUnitValue > perUnitCost ? "white" : "red";
            var perM3Color = perM3Value > perM3Cost ? "white" : "red";
            var perHrColor = perHrValue > perHrCost ? "white" : "red";

            <tr class="schematic-row">
                <th role="row" class="schematic-header" data-column="Material">@schematic.Name</th>
                <th data-column="Tier">@schematic.Output.GroupName.Remove(schematic.Output.GroupName.IndexOf(" "))</th>
                <th class="num" data-column="M3">@schematic.Output.Volume.ToString("n2")</th>
                <th class="num profit hidden" colspan="2" data-column="PerUnitProfit" style="color: @perUnitColor;">@perUnitProfit.ToString("n2")</th>
                <th class="num profit hidden" colspan="2" data-column="PerM3Profit" style="color: @perM3Color;">@perM3Profit.ToString("n2")</th>
                <th class="num profit hidden" colspan="2" data-column="PerHrProfit" style="color: @perHrColor;">@perHrProfit.ToString("n2")</th>
                <th class="num build-cost" data-column="PerUnitValue" style="color: @perUnitColor;">@perUnitValue.ToString("n2")</th>
                <th class="num build-cost" data-column="PerUnitCost">@perUnitCost.ToString("n2")</th>
                <th class="num build-cost" data-column="PerM3Value" style="color: @perM3Color;">@perM3Value.ToString("n2")</th>
                <th class="num build-cost" data-column="PerM3Cost">@perM3Cost.ToString("n2")</th>
                <th class="num build-cost" data-column="PerHrValue" style="color: @perHrColor;">@perHrValue.ToString("n2")</th>
                <th class="num build-cost" data-column="PerHrCost">@perHrCost.ToString("n2")</th>
                @foreach (ItemVM mat in ViewBag.RawMats)
                {
                    <td class="mat-box" data-column="@mat.ID">
                        @if (rawMats.FirstOrDefault(m => m.ID == mat.ID) != null)
                        {
                            <span><img src="~/images/pi_tool/check.svg" /></span>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
<script type="text/javascript" src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
<script type="text/javascript" src="~/js/pi-tool.js"></script>